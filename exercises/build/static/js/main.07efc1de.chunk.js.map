{"version":3,"sources":["services/contacts.js","components/SearchBar.js","components/ContactForm.js","components/Contacts.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","SearchBar","search","setSearch","onChange","event","currentTarget","value","ContactForm","props","newName","setNewName","newNumber","setNewNumber","persons","setNotificationMsg","setPersons","displayNotification","message","setTimeout","type","onClick","preventDefault","personObject","name","number","map","person","includes","window","confirm","personToUpdate","find","updatedPerson","contactService","updatedRecord","catch","error","createdContact","concat","Contacts","contactsToShow","filter","toUpperCase","contact","handleDeleteClicked","Notification","className","App","useState","notificationMsg","useEffect","initialContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07efc1de.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => (\n  axios\n    .get(baseUrl)\n    .then(response => response.data)\n)\n\nconst create = newObject => (\n  axios\n    .post(baseUrl, newObject)\n    .then(response => response.data)\n)\n\nconst update = (id, newObject) => (\n  axios\n    .put(`${baseUrl}/${id}`, newObject)\n    .then(response => response.data)\n)\n\nconst deleteContact = id => {\n  axios\n    .delete(`${baseUrl}/${id}`)\n}\n\nexport default {getAll, create, update, deleteContact}\n","import React from 'react'\n\nconst SearchBar = ({search, setSearch}) => {\n  const handleSearchChange = (event) => {\n    setSearch(event.currentTarget.value)\n  }\n\n  return(\n    <div>\n      search contacts: <input onChange={handleSearchChange} value={search} />\n    </div>\n  )\n}\n\nexport default SearchBar\n","import React from 'react'\nimport contactService from '../services/contacts'\n\nconst ContactForm = (props) => {\n  const {\n    newName,\n    setNewName,\n    newNumber,\n    setNewNumber,\n    persons,\n    setNotificationMsg,\n    setPersons\n  } = props\n\n  const handleNameChange = event => {\n    setNewName(event.currentTarget.value)\n  }\n\n  const handleNumberChange = event => {\n    setNewNumber(event.currentTarget.value)\n  }\n\n  const displayNotification = message => {\n    setNotificationMsg(message)\n    setTimeout(() => {\n      setNotificationMsg(null)\n    }, 5000)\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n\n    const nameAlreadyHere = persons\n      .map(person => person.name)\n      .includes(newName)\n\n    if (nameAlreadyHere) {\n      if (window.confirm(`${newName} is already in the Phonebook, would you like to update his number`)) {\n        const personToUpdate = persons.find(person => person.name === newName)\n        const updatedPerson = {...personToUpdate, number: newNumber}\n        return contactService\n          .update(updatedPerson.id, updatedPerson)\n          .then(updatedRecord => {\n            setPersons(persons.map(person => person.name === newName ?  updatedRecord : person))\n            displayNotification(`${updatedRecord.name} has been updated with number ${updatedRecord.number}`)\n            setNewName('')\n            setNewNumber('')\n          })\n          .catch(error => {\n              if (error.response.data.error.includes(\"Validation failed\")) {\n                return displayNotification(`Error: ${error.response.data.error}`)\n              }\n              displayNotification(\n                `${updatedPerson.name} has been previously deleted from the phonebook.`\n              )\n            }\n          )\n      }\n      return\n    }\n\n    contactService\n      .create(personObject)\n      .then(createdContact => {\n        setPersons(persons.concat(createdContact))\n        displayNotification(`${createdContact.name} has been created`)\n        setNewName('')\n        setNewNumber('')\n      })\n      .catch(error => {\n        displayNotification(\n          `Error: ${error.response.data.error}.`\n        )\n      })\n  }\n\n  return (\n    <form>\n      <div> name: <input onChange={handleNameChange} value={newName} /></div>\n      <div> number: <input onChange={handleNumberChange} value={newNumber} /></div>\n      <div> <button type=\"submit\" onClick={addPerson}>add</button> </div>\n    </form>\n  )\n}\n\nexport default ContactForm\n","import React from 'react'\nimport contactService from '../services/contacts'\n\nconst Contacts = ({persons, setPersons, search}) => {\n\n  const contactsToShow = persons.filter(\n    person => person.name.toUpperCase().includes(search.toUpperCase())\n  )\n\n  const handleDeleteClicked = (contact) => {\n    if (window.confirm(`Are you sure that you want to delete ${contact.name}?`)) {\n      setPersons(persons.filter(person => person.id !== contact.id))\n      contactService.deleteContact(contact.id)\n    }\n  }\n\n  return(\n    contactsToShow\n      .map(contact =>\n          <p key={contact.name}>\n            {contact.name}: {contact.number}\n            {\" \"}\n            <button onClick={() => handleDeleteClicked(contact)}>Delete contact</button>\n          </p>\n\n      )\n    )\n}\n\nexport default Contacts\n","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className={message.includes(\"has been deleted\") || message.includes(\"Error\") ? \"error\" : \"info\"}>\n      {message}\n    </div>\n  )\n}\n\nexport default Notification\n","import React, { useState, useEffect } from 'react'\nimport contactService from './services/contacts'\n\nimport SearchBar from './components/SearchBar'\nimport ContactForm from './components/ContactForm'\nimport Contacts from './components/Contacts'\nimport Notification from './components/Notification'\n\nconst App = () => {\n\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [search, setSearch] = useState('')\n  const [notificationMsg, setNotificationMsg] = useState()\n\n  useEffect(() => {\n      contactService\n        .getAll()\n        .then(initialContacts => {\n          setPersons(initialContacts)\n        })\n    }, [])\n\n  return (\n    <div>\n      {notificationMsg &&\n        <Notification message={notificationMsg} />\n      }\n      <h2>Phonebook</h2>\n\n      <SearchBar\n        search={search}\n        setSearch={setSearch}\n      />\n\n      <h3>Add a new contact</h3>\n      <ContactForm\n        newName={newName}\n        setNewName={setNewName}\n        newNumber={newNumber}\n        setNewNumber={setNewNumber}\n        persons={persons}\n        setNotificationMsg={setNotificationMsg}\n        setPersons={setPersons}\n      />\n\n      <h3>Contacts</h3>\n      <Contacts\n        persons={persons}\n        setPersons={setPersons}\n        search={search}\n      />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}